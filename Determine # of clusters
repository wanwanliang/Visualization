Sum_of_squared_distances = []
sil = []
K = range(3,10)
for k in K:
    km = KMeans(n_clusters=k, n_init=10, max_iter=500, init='k-means++')
    km = km.fit(fac_var)
    Sum_of_squared_distances.append(km.inertia_)
    
    lb = km.predict(fac_var)
    silhouette_avg = silhouette_score(fac_var, lb)
    sil.append(silhouette_avg )
plt.plot(K, Sum_of_squared_distances, 'bx-')
plt.xlabel('k')
plt.ylabel('Sum_of_squared_distances')
plt.title('Elbow Method For Optimal k')
plt.show()

plt.plot(K, sil, 'bx-')
plt.xlabel('k')
plt.ylabel('Silhouette score')
plt.title('Silhouette approach')
plt.show()



clusters_df1 = pd.DataFrame()
sse_ls1 = []
for rp in range(20):
    kmns = KMeans(n_clusters=n_cluster, n_init=15, max_iter=500, init='k-means++')
    kmns.fit(dt_x)

    lb = kmns.labels_
    lb_df = pd.DataFrame(lb)
    clusters_df1 = pd.concat([clusters_df1, lb_df], axis=1)

    sses = kmns.inertia_
    sse_ls1.append(sses)

sse_df1 = pd.DataFrame(sse_ls1)
ind1 = sse_df1[0].argmin(axis=0)
clusters= clusters_df1.iloc[:,ind1]
